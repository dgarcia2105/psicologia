@model MM.CAAM.Gestion.DTO.DTOs.UsuarioDTO
@*
    README
    https://www.bootdey.com/snippets/tagged/contacts*@
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Usuarios";
}
<br /> 
<br />
@Html.HiddenFor(model => model.Id)

<div class="container-fluid px-1 py-2 mx-auto">
    <div class="row d-flex justify-content-center">
        <div class="col-xl-7 col-lg-8 col-md-9 col-11">  
            <br />
            <div class="row">
                <div class="col-sm-12 text-center">
                    <h3 class="blue-text">
                        @if(Model.Id > 0)
                        {
                            <span>Modificar Usuario</span>
                        }
                        else
                        {
                            <span>Agrega un Nuevo Usuario</span>
                        }
                    </h3>
                </div>
            </div>
            <br />
            <div class="card">
                <div class="card-body"> 
                    <form method="post" onsubmit="return sendAjax();">
                        <div class="row  text-left">
                            <div class="col-sm-6 flex-column d-flex">
                                <div class="form-group">
                                    <label class="form-control-label px-6"><span class="text-danger">* </span></label>
                                    @Html.LabelFor(model => model.Nombre)
                                    @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control", @required = "required" } }) @*@placeholder = Model.Nombres, @required = "required"*@
                                    @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-sm-6 col-xs-6">
                                <label><span class="text-danger">* </span></label>
                                @Html.LabelFor(model => model.ApellidoPaterno)
                                @Html.EditorFor(model => model.ApellidoPaterno, new { htmlAttributes = new { @class = "form-control", @required = "required" } }) @*, @required = "required"*@
                                @Html.ValidationMessageFor(model => model.ApellidoPaterno, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-sm-6 col-xs-6">
                                <label><span class="text-danger">* </span></label>
                                @Html.LabelFor(model => model.ApellidoMaterno)
                                @Html.EditorFor(model => model.ApellidoMaterno, new { htmlAttributes = new { @class = "form-control", @required = "required" } }) @*, @required = "required"*@
                                @Html.ValidationMessageFor(model => model.ApellidoMaterno, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-sm-6 col-xs-6"> 
                                @Html.LabelFor(model => model.Notas)
                                @Html.EditorFor(model => model.Notas, new { htmlAttributes = new { @class = "form-control" } }) @*, @required = "required"*@
                            </div> 
                        </div>
                        <br />
                        <a class="btn-link" onclick="$('#opciones_avanzadas').toggle()">Opciones avanzadas</a>
                        <br />
                        <br />
                        <div id="opciones_avanzadas" class="row text-left" style="display:none;">
                            <div class="form-group col-sm-6 flex-column d-flex">
                                <label class="form-control-label px-6"><i class="fa-solid fa-calendar-days form-control-label"></i> Fecha de Nacimiento</label>
                                @*@Html.EditorFor(model => model.FechaNacimiento, new { htmlAttributes = new {@class = "form-control", @type = "date" } })*@
                                @Html.EditorFor(model => model.FechaNacimiento, new {htmlAttributes = new {@class = "form-control", @type = "date"} })
@*
                                @Html.TextBoxFor(x => x.FechaNacimiento, new { @class = "dateInput", @placeholder = "plz input date", @type = "datetime-local" })*@
                            </div>
                            <div class="form-group col-6">
                                <label>Genero</label>
                                @Html.DropDownListFor(model => model.GeneroId, (SelectList)ViewBag.Generos, "[SELECCIONE.. ]", new { @class = "form-control" })
                            </div>
                            <div class="form-group col-6">
                                <label>Rol</label>
                                @Html.DropDownListFor(model => model.RolId, (SelectList)ViewBag.Roles, "[SELECCIONE.. ]", new { @class = "form-control" })
                            </div>
                            <div class="form-group col-6 flex-column d-flex">
                                <label class="form-control-label px-6"><i class="fa-solid fa-address-book form-control-label"></i> Dirección</label>
                                @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            <div class="form-group col-6 flex-column d-flex">
                                <label class="form-control-label px-6"><i class="fa-solid fa-phone form-control-label"></i> Teléfono</label>

                                @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            <div class="form-group col-6 flex-column d-flex">
                                <label class="form-control-label px-6"><i class="fa-solid fa-briefcase form-control-label"></i> Ocupación</label>

                                @Html.EditorFor(model => model.Ocupacion, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            <div class="form-group col-sm-6">
                                <label class="form-label">¿Esta Activo?</label>
                                <br />
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="Activo" id="activoSi" value="true" checked>
                                    <label class="form-check-label">
                                        Si
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="Activo" id="activoNo" value="false">
                                    <label class="form-check-label">
                                        No
                                    </label>
                                </div>
                                @*@Html.EditorFor(model=>model.Activo)<span>test</span>*@
                            </div>
                            <div class="form-group col-6 flex-column d-flex">
                                <label class="form-control-label px-6"><i class="fa-solid fa-envelope form-control-label"></i> Correo</label>

                                @Html.EditorFor(model => model.Correo, new { htmlAttributes = new { @class = "form-control" } })
                            </div>

                            <div class="form-group col-sm-6">
                                <label><i class="fa-solid fa-key form-control-label"></i> Contraseña</label>
                                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", type = "password"}, autocomplete = "off" })
                            </div>
                            <div class="form-group col-sm-6">
                                <label> Comfirmar Contraseña</label>
                                @Html.EditorFor(model => model.ConfirmarPassword, new { htmlAttributes = new { @class = "form-control", type = "password" }, autocomplete = "off" })
                            </div>
                            <div class="form-group col-6 flex-column d-flex">
                                <label class="form-control-label px-6"><i class="fa-solid fa-globe form-control-label"></i> Nacionalidad</label>
                                @Html.EditorFor(model => model.Nacionalidad, new { htmlAttributes = new { @class = "form-control" } })
                            </div>


                            <div class="col-sm-6 flex-column d-flex">
                                @Html.LabelFor(model => model.AntecedentesHeredofamiliares)
                                @Html.EditorFor(model => model.AntecedentesHeredofamiliares, new { htmlAttributes = new { @class = "form-control" } }) @*@placeholder = Model.Nombres, @required = "required"*@
                                @Html.ValidationMessageFor(model => model.AntecedentesHeredofamiliares, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-6 flex-column d-flex">
                                @Html.LabelFor(model => model.AntecedentesPatologicosPersonales)
                                @Html.EditorFor(model => model.AntecedentesPatologicosPersonales, new { htmlAttributes = new { @class = "form-control" } }) @*@placeholder = Model.Nombres, @required = "required"*@
                                @Html.ValidationMessageFor(model => model.AntecedentesPatologicosPersonales, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-6 flex-column d-flex">
                                @Html.LabelFor(model => model.AntecedentesNoPatologicos)
                                @Html.EditorFor(model => model.AntecedentesNoPatologicos, new { htmlAttributes = new { @class = "form-control" } }) @*@placeholder = Model.Nombres, @required = "required"*@
                                @Html.ValidationMessageFor(model => model.AntecedentesNoPatologicos, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-6 flex-column d-flex">
                                @Html.LabelFor(model => model.Religion)
                                @Html.EditorFor(model => model.Religion, new { htmlAttributes = new { @class = "form-control" } }) @*@placeholder = Model.Nombres, @required = "required"*@
                                @Html.ValidationMessageFor(model => model.Religion, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-6 flex-column d-flex">
                                @Html.LabelFor(model => model.GrupoSanguineo)
                                @Html.EditorFor(model => model.GrupoSanguineo, new { htmlAttributes = new { @class = "form-control" } }) @*@placeholder = Model.Nombres, @required = "required"*@
                                @Html.ValidationMessageFor(model => model.GrupoSanguineo, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-6 flex-column d-flex">
                                @Html.LabelFor(model => model.RecomendadoPor)
                                @Html.EditorFor(model => model.RecomendadoPor, new { htmlAttributes = new { @class = "form-control" } }) @*@placeholder = Model.Nombres, @required = "required"*@
                                @Html.ValidationMessageFor(model => model.RecomendadoPor, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-6 flex-column d-flex">
                                @Html.LabelFor(model => model.SeguroMedico)
                                @Html.EditorFor(model => model.SeguroMedico, new { htmlAttributes = new { @class = "form-control" } }) @*@placeholder = Model.Nombres, @required = "required"*@
                                @Html.ValidationMessageFor(model => model.SeguroMedico, "", new { @class = "text-danger" })
                            </div> 
                            <div class="form-group col-6">
                                <label>Estado civil</label>
                                @Html.DropDownListFor(model => model.EstadoCivilId, (SelectList)ViewBag.ListEstadoCivil, "[SELECCIONE.. ]", new { @class = "form-control" })
                            </div> 
                            <div class="form-group col-6">
                                <label>Tipo de usuario</label>
                                @Html.DropDownListFor(model => model.TipoUsuarioId, (SelectList)ViewBag.ListTipoUsuario, "[SELECCIONE.. ]", new { @class = "form-control" })
                            </div>
                            <div class="form-group col-6">
                                <label>Grado de educación</label>
                                @Html.DropDownListFor(model => model.GradoEducacionId, (SelectList)ViewBag.ListGradoEducacion, "[SELECCIONE.. ]", new { @class = "form-control" })
                            </div>
                            <div class="form-group col-6">
                                <label>Estado</label>
                                @Html.DropDownListFor(model => model.EstadoVidaId, (SelectList)ViewBag.ListEstadoVida, "[SELECCIONE.. ]", new { @class = "form-control" })
                            </div>
                            @*<div class="form-group col-12">
                                @Html.LabelFor(model => model.PerfilNombreArchivo)
                                @Html.EditorFor(model => model.PerfilNombreArchivo, new { htmlAttributes = new { @class = "form-control", @type = "file" } })
                                @Html.ValidationMessageFor(model => model.PerfilNombreArchivo, "", new { @class = "text-danger" })
                                @if (!string.IsNullOrEmpty(Model.PerfilNombreArchivo))
                                {
                                    <a href="@Html.Encode(Model.PathImagenPerfil)" target="_blank">
                                        <i class="fa fa-paperclip"></i> @Html.Encode(Model.PerfilNombreArchivo)
                                    </a>
                                }
                            </div>*@
                        </div>
                        <br />
                        <div class="row ">
                            <div class="col-12 ">
                                <button id="btnEnviar" type="submit" class="btn btn-primary float-right" style="font-family: 'Google Sans',Roboto,Arial,sans-serif;">
                                    @if (Model.Id > 0)
                                    {
                                        <span>Modificar</span>
                                    }
                                    else
                                    {
                                        <span>Agregar</span>
                                    }
                                </button>  @*ml-auto*@
                            </div>
                        </div>
                    </form>
                    @*}*@
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    <script>
        $(document).ready(function () {
            $('#Form1').submit(function (event) {
                if (!event.result) {
                }
                else {
                    event.preventDefault();
                }
            });
        });
        function sendAjax() {
            event.preventDefault();
            console.log($("form").serialize());
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CrearUsuario", "Usuario", new{id=@Model.Id})',
                data: $("form").serialize(),
                dataType: 'json',
                beforeSend: function () {
                    showProgress();
                    $('#btnEnviar').prop('disabled', true);
                },
                success: function (data) {
                    console.log("1");
                    console.log(data);
                    if (code => 200 && code < 299) {

                        window.location.replace("/Usuario/Index/");
                    }
                    else {
                        Swal.fire({ icon: 'error', title: 'Oops...', text: data.responseJSON.message });
                        $('#btnEnviar').prop('disabled', false);
                    }
                    hideProgress();
                },
                error: function (data) { 
                    console.log(data);
                    console.log();
                    var code = data.responseJSON.code;

                    if (code => 400 && code < 499) {
                        Swal.fire('AVISO', data.responseJSON.message, 'question');
                    }
                    else if (code => 500 && code < 599) {
                        Swal.fire({ icon: 'error', title: 'Oops...', text: data.responseJSON.message });
                    }


                    $('#btnEnviar').prop('disabled', false);

                    hideProgress();
                }
            });

        };
    </script>
}